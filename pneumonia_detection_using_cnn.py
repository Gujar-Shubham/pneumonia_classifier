# -*- coding: utf-8 -*-
"""Pneumonia detection using CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rTQVBzt3hG9KPrTek0DvR0VdY4yokKtF
"""

#!unzip "/content/drive/MyDrive/ML_SCE/archive.zip" -d "/content/drive/MyDrive/ML_SCE/"

from google.colab import drive
drive.mount('/content/drive')

import os
import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
import numpy as np
import keras
from keras.models import Sequential
from keras.layers.core import Dense, Flatten, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
import shutil
import os
import cv2
import tensorflow as tf
from keras.callbacks import EarlyStopping
from keras.applications import Xception
from keras.applications.xception import preprocess_input 
from keras.applications import ResNet50
from keras.applications import InceptionV3
from keras.applications import Xception # TensorFlow ONLY
from tensorflow.keras.applications import VGG16
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications import imagenet_utils
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img

os.listdir("/content/drive/MyDrive/ML_SCE/chest_xray")

len(os.listdir("/content/drive/MyDrive/ML_SCE/chest_xray/train/PNEUMONIA"))

train_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/train"
test_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/test"
val_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/val"

print("Train set:\n========================================")
num_pneumonia = len(os.listdir(os.path.join(train_dir, 'PNEUMONIA')))
num_normal = len(os.listdir(os.path.join(train_dir, 'NORMAL')))
print(f"PNEUMONIA={num_pneumonia}")
print(f"NORMAL={num_normal}")

print("Test set:\n========================================")
print(f"PNEUMONIA={len(os.listdir(os.path.join(test_dir, 'PNEUMONIA')))}")
print(f"NORMAL={len(os.listdir(os.path.join(test_dir, 'NORMAL')))}")

print("Validation set:\n========================================")
print(f"PNEUMONIA={len(os.listdir(os.path.join(val_dir, 'PNEUMONIA')))}")
print(f"NORMAL={len(os.listdir(os.path.join(val_dir, 'NORMAL')))}")

pneumonia = os.listdir("/content/drive/MyDrive/ML_SCE/chest_xray/train/PNEUMONIA")
pneumonia_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/train/PNEUMONIA"

plt.figure(figsize=(20, 10))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(pneumonia_dir, pneumonia[i]))
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    
plt.tight_layout()

normal = os.listdir("/content/drive/MyDrive/ML_SCE/chest_xray/train/NORMAL")
normal_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/train/NORMAL"

plt.figure(figsize=(20, 10))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(normal_dir, normal[i]))
    plt.imshow(img, cmap='gray')
    plt.axis('off')
    
plt.tight_layout()

normal_img = os.listdir("/content/drive/MyDrive/ML_SCE/chest_xray/train/NORMAL")[0]
normal_dir = "/content/drive/MyDrive/ML_SCE/chest_xray/train/NORMAL"
sample_img = plt.imread(os.path.join(normal_dir, normal_img))
plt.imshow(sample_img, cmap='gray')
plt.colorbar()
plt.title('Raw Chest X Ray Image')

print(f"The dimensions of the image are {sample_img.shape[0]} pixels width and {sample_img.shape[1]} pixels height, one single color channel.")
print(f"The maximum pixel value is {sample_img.max():.4f} and the minimum is {sample_img.min():.4f}")
print(f"The mean value of the pixels is {sample_img.mean():.4f} and the standard deviation is {sample_img.std():.4f}")

from keras.preprocessing.image import ImageDataGenerator

#Data Augmentation
image_generator = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    samplewise_center=True,
    samplewise_std_normalization=True
)

train = image_generator.flow_from_directory(train_dir, 
                                            batch_size=8, 
                                            shuffle=True, 
                                            class_mode='binary',
                                            target_size=(180, 180))

validation = image_generator.flow_from_directory(val_dir, 
                                                batch_size=1, 
                                                shuffle=False, 
                                                class_mode='binary',
                                                target_size=(180, 180))

test = image_generator.flow_from_directory(test_dir, 
                                            batch_size=1, 
                                            shuffle=False, 
                                            class_mode='binary',
                                            target_size=(180, 180))

from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D, Dropout, Flatten, BatchNormalization

model = Sequential()
model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(180, 180, 3), activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(filters=32, kernel_size=(3, 3), input_shape=(180, 180, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))
model.add(BatchNormalization())
model.add(MaxPool2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))

model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', 
              optimizer=tf.keras.optimizers.Adam(0.000001), 
              metrics=['accuracy'])

epochs = 20
es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=0)
history = model.fit(train, 
                    epochs=epochs,
                    validation_data=validation,
                    steps_per_epoch=50,
                    callbacks=[es]
                    )

#Some visualizations
import matplotlib.pyplot as plt
#Loss
plt.plot(history.history['loss'],label='loss')
plt.plot(history.history['val_loss'],label='val_loss')
plt.xlabel('epochs')
# Set the y axis label of the current axis.
plt.ylabel('loss')
plt.ylim(ymin=0) 
# Set a title 
# Display the figure.
plt.legend(['train', 'val'], loc='upper left')
plt.show()

#Accuracy
plt.plot(history.history['accuracy'],label='acc')
plt.plot(history.history['val_accuracy'],label='val_acc')
plt.xlabel('epochs')
# Set the y axis label of the current axis.
plt.ylabel('accuracy')
plt.ylim(ymin=0) 
# Set a title 
#plt.title('Draw a line.')
# Display the figure.
plt.legend(['train', 'val'], loc='upper left')
plt.show()

IMAGE_SIZE=180
IMG_SHAPE = (IMAGE_SIZE, IMAGE_SIZE, 3)

base_model = tf.keras.applications.VGG16(input_shape=IMG_SHAPE,
                                              include_top=False, 
                                              weights='imagenet')

base_model.trainable = False
model = tf.keras.Sequential([
                             base_model,
                             tf.keras.layers.Conv2D(64, 3, activation='relu'),
                             tf.keras.layers.Dropout(0.2),
                             tf.keras.layers.Conv2D(32, 3, activation='relu'),
                             tf.keras.layers.Dropout(0.2),
                             tf.keras.layers.GlobalAveragePooling2D(),
                             tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer=tf.keras.optimizers.Adam(1e-4), 
              loss='binary_crossentropy', 
              metrics=['accuracy'])
model.summary()

epochs = 20
es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=20)
history = model.fit(train, 
                    epochs=epochs,
                    validation_data=validation,
                    steps_per_epoch=5213//32,
                    callbacks=[es]
                    )

plt.figure(figsize=(12, 8))

plt.subplot(2, 2, 1)
plt.plot(history.history['loss'], label='Loss')
plt.plot(history.history['val_loss'], label='Val_Loss')
plt.ylim(ymin=0) 
plt.legend()
plt.title('Loss Evolution')

plt.subplot(2, 2, 2)
plt.plot(history.history['accuracy'], label='Accuracy')
plt.plot(history.history['val_accuracy'], label='Val_Accuracy')
plt.ylim(ymin=0) 
plt.legend()
plt.title('Accuracy Evolution')

evaluation = model.evaluate(test)
print(f"Test Accuracy: {evaluation[1] * 100:.2f}%")

evaluation = model.evaluate(train)
print(f"Train Accuracy: {evaluation[1] * 100:.2f}%")

from sklearn.metrics import confusion_matrix, classification_report

pred = model.predict(test)

pd.DataFrame(classification_report(test.classes, pred > 0.5, output_dict=True))

print(confusion_matrix(test.classes, pred > 0.5))

print(classification_report(test.classes, pred > 0.5))

model.save("/content/drive/MyDrive/ML_SCE/pvgg1.h5")

from keras.models import load_model

import cv2

import numpy as np

model = load_model('/content/drive/MyDrive/ML_SCE/pvgg.h5')
img = cv2.imread('/content/drive/MyDrive/ML_SCE/chest_xray/train/NORMAL/IM-0115-0001.jpeg')
img = cv2.resize(img,(180,180))
img = np.reshape(img,[1,180,180,3])
classes = model.predict_classes(img)
#print(classes)
preds = model.predict_classes(img)
if(preds == [[1]]):
  pred = 'PNEUMONIA'
else:
  pred = 'NORMAL'
#print("Predicted Label name:", pred)

print("Model outut:", classes)
print("Predicted Label name:", pred)

